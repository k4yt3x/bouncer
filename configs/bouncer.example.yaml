# Telegram Bot API token
telegram_bot_token: YOUR_TELEGRAM_BOT_TOKEN

# The LLM backend to use for generating challenges and verifying answers
generative_ai_backend: openai

# Number of seconds to wait for the user to answer the challenge
answer_timeout: 60

# Number of seconds to wait before allowing the user to retry the challenge
retry_timeout: 300

# OpenAI Settings
openai:
  # OpenAI API key
  api_key: YOUR_OPENAI_API_KEY

  # The model to use for generating challenges and verifying answers
  model: gpt-4o

  # Additional options to pass to the model
  options:
    temperature: 0.4

# Ollama Settings
ollama:
  # The model to use for generating challenges and verifying answers
  model: qwen2.5-coder:32b

  # Additional options to pass to the model
  options:
    temperature: 0.4

# Gemini Settings
gemini:
  # Gemini API key
  api_key: YOUR_GEMINI_API_KEY

  # The model to use for generating challenges and verifying answers
  model: gemini-1.5-pro

  # Additional options to pass to the model
  options:
    temperature: 0.4

# Custom messages and templates
messages:
  # Message to send when an internal error occurs
  internal_error: "An internal error occurred. Please notify the admin or try again later."

  # Message to send when the user requests to join a group
  join_requested: |
    Hi, {}! You recently requested to join {}.
    Before I approve your request, please answer this question:

    {}

    Please reply directly with the correct answer. You have {} seconds.

  # Message to send when the user answers the challenge correctly
  correct_answer: "✅ Correct answer! Your join request has been approved. Welcome!"

  # Message to send when the user answers the challenge incorrectly
  wrong_answer: "❌ Wrong answer! Your join request has been denied. Please try again in {} seconds."

  # Message to send when the user takes too long to answer the challenge
  timed_out: "⏰ Time's up! Your join request has been denied. Please try again in {} seconds."

  # Message to send when the user retries the challenge too soon
  retry_timer: "Please wait {} seconds before requesting to join again. {} seconds remaining."

  # Message to send when the user already has an ongoing challenge to answer
  ongoing_challenge: "You have an unfinished join request. Please complete your current question first."

  # Message to send when the user has no challenge to answer
  no_challenge: "You currently don't have any questions to answer."

prompts:
  # Template for generating a challenge with the LLM
  generate_challenge: |
    You need to create a challenge question for Telegram group admission.
    Generate a short, difficult question about this topic: {}

    Use these examples to create a similar question, following the same format and difficulty level. Only write the question, don't provide explanations or answers:
    Example 1: What is the phenomenon called when signals are reflected back to Earth by the ionosphere?
    Example 2: If you add a 9 dB gain amplifier to your 2-watt handheld radio, what would be the combined output power?

  # Template for verifying an answer with the LLM
  verify_answer: |
    Verify the answer to this question: \"{}\"

    <Answer>
    {}
    </Answer>

    The answer doesn't need to be comprehensive, but it shouldn't contain factual errors.
    If you believe the answer is correct, only reply with `{}`, otherwise explain why the answer is wrong."
